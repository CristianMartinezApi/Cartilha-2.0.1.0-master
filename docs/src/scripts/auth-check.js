/**
 * ‚úÖ VERIFICA√á√ÉO DE AUTENTICA√á√ÉO SEM TIMEOUT
 * Vers√£o permanente - sess√£o nunca expira automaticamente
 */

console.log('üîí Sistema de verifica√ß√£o PERMANENTE carregado');

(function() {
    console.log('üöÄ Verifica√ß√£o de autentica√ß√£o PERMANENTE iniciada');
    
    function checkAuthentication() {
        console.log('üîç Verificando autentica√ß√£o (modo permanente)...');
        
        // Verificar se o Firebase est√° inicializado
        if (typeof firebase === 'undefined' || !firebase.auth) {
            console.error('‚ùå Firebase n√£o inicializado. Redirecionando...');
            window.location.href = 'login.html';
            return;
        }
      
        // Verificar estado de autentica√ß√£o
        firebase.auth().onAuthStateChanged(function(user) {
            if (!user) {
                console.log('‚ùå Usu√°rio n√£o logado, redirecionando...');
                window.location.href = 'login.html';
                return;
            }
            
            console.log('‚úÖ Usu√°rio logado:', user.email);
            
            // Verificar se o usu√°rio √© um administrador
            firebase.firestore().collection('admins').doc(user.uid).get()
                .then(function(doc) {
                    if (doc.exists) {
                        console.log('‚úÖ Usu√°rio √© admin - SESS√ÉO PERMANENTE ATIVA');
                        
                        // ‚úÖ REMOVER COMPLETAMENTE A VERIFICA√á√ÉO DE TIMEOUT
                        // ‚úÖ N√ÉO VERIFICAR lastLoginTime
                        // ‚úÖ N√ÉO VERIFICAR sessionAge
                        // ‚úÖ N√ÉO FAZER LOGOUT AUTOM√ÅTICO
                        
                        console.log('üîí Sess√£o permanente estabelecida para:', user.email);
                        console.log('‚è∞ Timeout desabilitado - sess√£o nunca expira');
                        
                        // ‚úÖ OPCIONAL: Salvar timestamp apenas para refer√™ncia (n√£o para verifica√ß√£o)
                        const currentTime = Date.now();
                        localStorage.setItem('lastLoginTime', currentTime.toString());
                        console.log('üìù Timestamp salvo para refer√™ncia:', new Date(currentTime).toLocaleString());
                        
                    } else {
                        // N√£o √© um administrador
                        console.error('‚ùå Usu√°rio n√£o √© admin:', user.uid);
                        
                        localStorage.removeItem('lastLoginTime');
                        firebase.auth().signOut().then(function() {
                            window.location.href = 'login.html';
                        });
                        return;
                    }
                })
                .catch(function(error) {
                    console.error('‚ùå Erro ao verificar permiss√£o de admin:', error);
                    localStorage.removeItem('lastLoginTime');
                    firebase.auth().signOut().then(function() {
                        window.location.href = 'login.html';
                    });
                });
        });
    }
    
    // Aguardar o Firebase estar completamente carregado
    function waitForFirebase() {
        if (typeof firebase !== 'undefined' && firebase.auth && firebase.firestore) {
            checkAuthentication();
        } else {
            console.log('‚è≥ Aguardando Firebase carregar...');
            setTimeout(waitForFirebase, 100);
        }
    }
    
    // Iniciar verifica√ß√£o quando o DOM estiver pronto
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', waitForFirebase);
    } else {
        waitForFirebase();
    }
})();

// ‚úÖ EVENTO DOMContentLoaded SEM VERIFICA√á√ïES DE TIMEOUT
document.addEventListener('DOMContentLoaded', function() {
    console.log('üìÑ DOM carregado - configurando UI permanente');
    
    function setupUI() {
        if (typeof firebase === 'undefined' || !firebase.auth) {
            setTimeout(setupUI, 100);
            return;
        }
        
        console.log('üîí Configurando interface para sess√£o permanente...');
        
        // ‚úÖ REMOVER COMPLETAMENTE A VERIFICA√á√ÉO PERI√ìDICA DE TIMEOUT
        // ‚úÖ N√ÉO FAZER setInterval para verificar sess√£o
        // ‚úÖ N√ÉO VERIFICAR sessionAge
        
        // ‚úÖ OPCIONAL: Monitoramento apenas para log (sem a√ß√£o)
        setInterval(function() {
            const user = firebase.auth().currentUser;
            if (user) {
                const lastLoginTime = localStorage.getItem('lastLoginTime');
                if (lastLoginTime) {
                    const sessionAge = (Date.now() - parseInt(lastLoginTime)) / (1000 * 60);
                    console.log('üìä Sess√£o ativa h√°:', Math.round(sessionAge), 'minutos (sem timeout)');
                } else {
                    console.log('üìä Sess√£o ativa (sem timestamp)');
                }
            }
        }, 5 * 60 * 1000); // Log a cada 5 minutos apenas para informa√ß√£o
        
        // ‚úÖ ATUALIZAR TIMESTAMP APENAS PARA REFER√äNCIA (n√£o para verifica√ß√£o)
        function updateTimestampForReference() {
            const user = firebase.auth().currentUser;
            if (user) {
                const currentTime = Date.now();
                localStorage.setItem('lastLoginTime', currentTime.toString());
                console.log('üìù Timestamp atualizado (refer√™ncia):', new Date(currentTime).toLocaleTimeString());
            }
        }
        
        // ‚úÖ EVENTOS DE INTERA√á√ÉO (apenas para atualizar refer√™ncia, n√£o para verificar timeout)
        ['click', 'keypress', 'scroll', 'touchstart'].forEach(function(event) {
            document.addEventListener(event, updateTimestampForReference, { passive: true });
        });
        
        console.log('‚úÖ Interface configurada para sess√£o permanente');
    }
    
    setupUI();
});

/**
 * ‚úÖ FUN√á√ÉO DE DEBUG GLOBAL
 */
window.debugAuthCheck = function() {
    console.log('üîç DEBUG AUTH-CHECK:');
    console.log('- Firebase dispon√≠vel:', typeof firebase !== 'undefined');
    console.log('- Usu√°rio atual:', firebase.auth().currentUser?.email || 'Nenhum');
    console.log('- LastLoginTime:', localStorage.getItem('lastLoginTime'));
    console.log('- Sess√£o permanente:', 'SIM - sem timeout');
    
    const lastLoginTime = localStorage.getItem('lastLoginTime');
    if (lastLoginTime) {
        const sessionAge = (Date.now() - parseInt(lastLoginTime)) / (1000 * 60);
        console.log('- Idade da sess√£o:', Math.round(sessionAge), 'minutos (informativo apenas)');
    }
};

/**
 * ‚úÖ FUN√á√ÉO PARA LOGOUT MANUAL
 */
window.forceLogoutAdmin = function() {
    console.log('üö™ For√ßando logout manual...');
    localStorage.removeItem('lastLoginTime');
    firebase.auth().signOut().then(function() {
        window.location.href = 'login.html';
    }).catch(function() {
        window.location.href = 'login.html';
    });
};

console.log('üîí auth-check.js carregado - MODO PERMANENTE');
console.log('üéØ Use window.debugAuthCheck() para debug');
console.log('üö™ Use window.forceLogoutAdmin() para logout manual');
