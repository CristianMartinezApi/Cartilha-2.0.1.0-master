/**
 * Script para exibir informa√ß√µes do usu√°rio logado - VERS√ÉO CORRIGIDA
 */

console.log('üîß Script user-display.js carregado');

document.addEventListener('DOMContentLoaded', async () => {
    console.log('üîç Iniciando exibi√ß√£o de informa√ß√µes do usu√°rio...');
    
    // Aguardar Firebase estar pronto e usu√°rio autenticado
    await waitForFirebaseAuth();
    
    // Tentar exibir informa√ß√µes do usu√°rio
    await displayUserInfo();
});

/**
 * Aguardar Firebase Auth estar pronto
 */
function waitForFirebaseAuth() {
    return new Promise((resolve) => {
        let attempts = 0;
        const maxAttempts = 30;
        
        const checkAuth = () => {
            attempts++;
            console.log(`üîç Verificando Firebase Auth (tentativa ${attempts}/${maxAttempts})`);
            
            if (typeof firebase !== 'undefined' && firebase.auth) {
                // Aguardar estado de autentica√ß√£o
                firebase.auth().onAuthStateChanged((user) => {
                    if (user) {
                        console.log('‚úÖ Usu√°rio Firebase encontrado:', user.email);
                        resolve();
                    } else if (attempts >= maxAttempts) {
                        console.warn('‚ö†Ô∏è Timeout aguardando autentica√ß√£o');
                        resolve();
                    } else {
                        setTimeout(checkAuth, 500);
                    }
                });
            } else if (attempts >= maxAttempts) {
                console.warn('‚ö†Ô∏è Firebase n√£o encontrado ap√≥s v√°rias tentativas');
                resolve();
            } else {
                setTimeout(checkAuth, 500);
            }
        };
        
        checkAuth();
    });
}

/**
 * Fun√ß√£o principal para exibir informa√ß√µes do usu√°rio
 */
async function displayUserInfo() {
    console.log('üöÄ Iniciando displayUserInfo...');
    
    const userInfoDisplay = document.getElementById('user-info-display');
    const userLoadingDisplay = document.getElementById('user-loading-display');
    const userDisplayName = document.getElementById('user-display-name');
    const userDisplayEmail = document.getElementById('user-display-email');
    const logoutBtn = document.getElementById('logout-btn');
    
    if (!userInfoDisplay || !userLoadingDisplay) {
        console.error('‚ùå Elementos principais n√£o encontrados');
        return;
    }
    
    try {
        console.log('üì± Mostrando loading...');
        // Mostrar loading
        userLoadingDisplay.style.display = 'block';
        userInfoDisplay.style.display = 'none';
        
        console.log('üîç Tentando capturar informa√ß√µes do usu√°rio...');
        // Tentar capturar informa√ß√µes do usu√°rio
        const userInfo = await getUserInfo();
        
        console.log('üìã Informa√ß√µes capturadas:', userInfo);
        
        if (userInfo && (userInfo.name || userInfo.email)) {
            console.log('‚úÖ Atualizando interface com:', userInfo);
            
            // Atualizar interface
            if (userDisplayName) {
                userDisplayName.textContent = userInfo.name || 'Usu√°rio';
                console.log('‚úÖ Nome atualizado:', userInfo.name);
            }
            if (userDisplayEmail) {
                userDisplayEmail.textContent = userInfo.email || '';
                console.log('‚úÖ Email atualizado:', userInfo.email);
            }
            
            // Mostrar informa√ß√µes do usu√°rio
            userLoadingDisplay.style.display = 'none';
            userInfoDisplay.style.display = 'block';
            
            console.log('‚úÖ Interface atualizada com sucesso');
            
        } else {
            console.warn('‚ö†Ô∏è Nenhuma informa√ß√£o v√°lida encontrada');
            showUserError('Usu√°rio n√£o identificado');
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao exibir informa√ß√µes do usu√°rio:', error);
        showUserError('Erro ao carregar informa√ß√µes');
    }
    
    // Configurar bot√£o de logout
    if (logoutBtn) {
        logoutBtn.addEventListener('click', handleLogout);
        console.log('‚úÖ Bot√£o de logout configurado');
    }
}

/**
 * Capturar informa√ß√µes do usu√°rio - VERS√ÉO CORRIGIDA
 */
async function getUserInfo() {
    console.log('üîç Iniciando captura de informa√ß√µes do usu√°rio...');
    
    // M√©todo 1: Firebase Auth - VERS√ÉO MELHORADA
    console.log('üîç Tentando Firebase Auth...');
    if (typeof firebase !== 'undefined' && firebase.auth) {
        console.log('‚úÖ Firebase dispon√≠vel, verificando usu√°rio atual...');
        
        try {
            // Aguardar estado de autentica√ß√£o de forma s√≠ncrona
            const currentUser = firebase.auth().currentUser;
            
            if (currentUser && currentUser.email) {
                console.log('‚úÖ Usu√°rio Firebase encontrado:', {
                    email: currentUser.email,
                    displayName: currentUser.displayName,
                    uid: currentUser.uid
                });
                
                // Extrair nome do email se n√£o tiver displayName
                let userName = currentUser.displayName;
                if (!userName && currentUser.email) {
                    userName = currentUser.email.split('@')[0];
                    // Capitalizar primeira letra
                    userName = userName.charAt(0).toUpperCase() + userName.slice(1);
                }
                
                return {
                    name: userName || 'Usu√°rio',
                    email: currentUser.email,
                    source: 'Firebase Auth'
                };
            } else {
                console.log('‚ö†Ô∏è Nenhum usu√°rio logado no Firebase no momento');
                
                // Tentar aguardar um pouco mais
                return new Promise((resolve) => {
                    const unsubscribe = firebase.auth().onAuthStateChanged((user) => {
                        unsubscribe();
                        if (user && user.email) {
                            let userName = user.displayName;
                            if (!userName && user.email) {
                                userName = user.email.split('@')[0];
                                userName = userName.charAt(0).toUpperCase() + userName.slice(1);
                            }
                            
                            resolve({
                                name: userName || 'Usu√°rio',
                                email: user.email,
                                source: 'Firebase Auth (async)'
                            });
                        } else {
                            resolve(null);
                        }
                    });
                    
                    // Timeout ap√≥s 3 segundos
                    setTimeout(() => {
                        unsubscribe();
                        resolve(null);
                    }, 3000);
                });
            }
        } catch (error) {
            console.error('Erro ao acessar Firebase Auth:', error);
        }
    } else {
        console.log('‚ö†Ô∏è Firebase n√£o dispon√≠vel');
    }
    
    // M√©todo 2: Intranet (procurar por texto na p√°gina)
    console.log('üîç Tentando captura via Intranet...');
    const bodyText = document.body.innerText || document.body.textContent;
    const loginMatch = bodyText.match(/Voc√™ est√° logado\(a\) como\s+(\w+)/i);
    
    if (loginMatch && loginMatch[1]) {
        const username = loginMatch[1];
        console.log('‚úÖ Usu√°rio da intranet encontrado:', username);
        
        return {
            name: username.charAt(0).toUpperCase() + username.slice(1),
            email: `${username}@pge.sc.gov.br`,
            source: 'Intranet PGE-SC'
        };
    } else {
        console.log('‚ö†Ô∏è Padr√£o de intranet n√£o encontrado');
    }
    
    // M√©todo 3: LocalStorage
    console.log('üîç Tentando LocalStorage...');
    const storedUser = localStorage.getItem('currentUser');
    if (storedUser) {
        try {
            const userData = JSON.parse(storedUser);
            console.log('üì¶ Dados do localStorage:', userData);
            
            if (userData.userName || userData.userEmail) {
                return {
                    name: userData.userName || 'Usu√°rio',
                    email: userData.userEmail || '',
                    source: 'Dados armazenados'
                };
            }
        } catch (e) {
            console.warn('‚ö†Ô∏è Erro ao ler dados armazenados:', e);
        }
    } else {
        console.log('‚ö†Ô∏è Nenhum dado no localStorage');
    }
    
    // M√©todo 4: Fallback
    console.log('üîÑ Usando fallback...');
    return {
        name: 'Usu√°rio PGE-SC',
        email: 'usuario@pge.sc.gov.br',
        source: 'Padr√£o'
    };
}

/**
 * Mostrar erro nas informa√ß√µes do usu√°rio
 */
function showUserError(message) {
    console.log('‚ùå Mostrando erro:', message);
    
    const userLoadingDisplay = document.getElementById('user-loading-display');
    const userInfoDisplay = document.getElementById('user-info-display');
    
    if (userLoadingDisplay) {
        userLoadingDisplay.style.display = 'none';
    }
    
    if (userInfoDisplay) {
        userInfoDisplay.innerHTML = `
            <div class="alert alert-warning alert-sm mb-0" role="alert">
                <i class="fas fa-exclamation-triangle me-1"></i>
                ${message}
            </div>
        `;
        userInfoDisplay.style.display = 'block';
    }
}

/**
 * Lidar com logout
 */
async function handleLogout() {
    console.log('üö™ Iniciando logout...');
    
    const confirmLogout = confirm('Tem certeza que deseja sair?');
    if (!confirmLogout) return;
    
    try {
        // Logout do Firebase se dispon√≠vel
        if (typeof firebase !== 'undefined' && firebase.auth) {
            await firebase.auth().signOut();
            console.log('‚úÖ Logout do Firebase realizado');
        }
        
        // Limpar dados locais
        localStorage.removeItem('currentUser');
        localStorage.removeItem('lastLoginTime');
        sessionStorage.clear();
        console.log('‚úÖ Dados locais limpos');
        
        // Redirecionar
        window.location.href = 'login.html';
        
    } catch (error) {
        console.error('‚ùå Erro ao fazer logout:', error);
        alert('Erro ao sair. Tente novamente.');
    }
}
